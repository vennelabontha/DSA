A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. 
It behaves like a stack of plates, where the last plate added is the first one to be removed.

Key Operations on Stack Data Structures

->Push: Adds an element to the top of the stack.
->Pop: Removes the top element from the stack.
->Peek: Returns the top element without removing it.
->IsEmpty: Checks if the stack is empty.
->IsFull: Checks if the stack is full (in case of fixed-size arrays).

Stacks can be implemented using two ways

->Using Arrays(fixed size).
->Using LinkedList(Dynamic size).

1->Stack Implimentation using Arrays

class stack {
    int size = 10000;
    int arr[] = new int[size];
    int top = -1;
    void push(int x) {
        top++;
        arr[top] = x;
    }
    int pop() {
        int x = arr[top];
        top--;
        return x;
    }
    int top() {
        return arr[top];
    }
    int size() {
        return top + 1;
    }
}

2->Stack Implementation using LinkedList

import java.util.*;
class Lnode {
    int data;
    Lnode next;

    Lnode(int x) {
        data = x;
        next = null;
    }
}
public  class MyStack {
    Lnode head=null;
    public void push(int x){
        Lnode n=new Lnode(x);
        if(n==null){
            System.out.println("stack is overflow");
            return;
        }
        if(head==null){
            head=n;
        }
        else{
            n.next=head;
            head=n;
     }
    }
    public void pop(){
        if(head==null){
            System.out.println("stack is underflow");
            return;
        }
        System.out.println(head.data+"is deleted");
        head=head.next;
    }
  public void display() {
        if (head == null) {
            System.out.println("stack is empty");
            return;
        }
        Lnode temp;
        for (temp = head; temp != null; temp = temp.next) {
            System.out.println(temp.data+" ");
        }
    }


