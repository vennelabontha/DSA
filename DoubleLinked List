DoubleLinked List

A doubly linked list is a data structure that consists of a set of nodes, each of which contains a value and two pointers, 
one pointing to the previous node in the list and one pointing to the next node in the list. 
This allows for efficient traversal of the list in both directions, making it suitable for applications where frequent insertions and deletions are required.

Representation of Doubly Linked List in Data Structure
In a data structure, a doubly linked list is represented using nodes that have three fields:
1->Data
2->A pointer to the next node (next)
3->A pointer to the previous node (prev)

//double linked list creation,insertion ,deletion ,display operations using Java.
//creating Node class

import java.util.*;
class Node
{
	int data;
	Node next,prev;
	
	Node(int x)
	{
		data=x;
		prev=null;
		next=null;
	}
}

class DoubleList
{
	Node head,tail;
	DoubleList()
	{
	   head=tail=null;
	}

	void create(int x) //Creaing the Node and adding bback to the existed List
	{
	    Node n=new Node(x);
	    if(head==null)
		head=tail=n;
	    else
	    {
		tail.next=n;
		n.prev=tail;
		tail=n;
	    }
	}
  void rshow() //Displaying from head to tail Forwards
	{
	    if(head==null)
	    {
		System.out.println("List is empty");
		return;
	    }
	    Node temp=head;
	    while(temp!=null)
	    {
		System.out.print(temp.data+" ");
		temp=temp.next;
	    }
	}
  void lshow() //Displaying from tail to head Backwards
	{
	   if(head==null)
	   {
		System.out.println("List is empty");
		return;
	   }
	   Node temp=tail;
	   while(temp!=null)
	   {
		System.out.print(temp.data+" ");
		temp=temp.prev;
	   }
	}

	void insertFirst(int x)  //Making the nw node as Head Node
	{
	   Node n=new Node(x);
	   if(head==null)
		head=tail=n;
	   else
	   {
		head.prev=n;
		n.next=head;
		head=n;
	   }
	}
  void insertPosition(int x,int pos)  //Inserting newnode at specified Position
	{
		Node n=new Node(x);
		if(head==null)
			head=tail=n;
		else
		{
			Node temp=head;
			int count=1;
	        	while(count<pos && temp.next!=null)
			{
				count=count+1;
				temp=temp.next;
			}
			if(temp.next==null)
			{
			   temp.next=n;
			   n.prev=temp;
	   		   tail=n;
			}
			else
			{
				n.next=temp;
				n.prev=temp.prev;
				temp.prev.next=n;
				temp.prev=n;
			}
		}
	}
  void deleteFirst()  //Making the Second Node as HeadNode
	{
		if(head==null)
		{
			System.out.print("List is empty");
			return;
		}
		if(head.next==null)
			head=tail=null;
   		else
		{
			Node temp=head;
			head=head.next;
			head.prev=null;
			temp=null;
		}
	}
  void deleteLast() //Removing the tail Node and making the previous of tail node as tail.
	{
		if(head==null)
		{
			System.out.println("List is empty");
			return;
		}
		if(tail.prev==null)
			head=tail=null;
   		else
		{
			Node temp=tail;
			tail=tail.prev;
			tail.next=null;
			temp=null;
		}
	}

  void deletePosition(int pos) //Deleting the node at specified Position
	{
		if(head==null)
		{
			System.out.print("List is empty");
			return;
		}
		int c=1;
		Node temp=head;
		while(c<pos && temp.next!=null)
		{
			c=c+1;
			temp=temp.next;
		}
		if(temp.next==null)
		{
			temp.prev.next=null;
			tail=temp.prev;
			temp=null;
		}
   		else
		{
			temp.prev.next=temp.next;
			temp.next.prev=temp.prev;
			temp=null;
		}
	}
}
class Test
{
public static void main(String args[])
{
    Scanner s=new Scanner(System.in);
    DoubleList d1=new DoubleList();
    for(;;)
    {
	System.out.println();
	System.out.println("1.Create\n2.Print\n3.InsertFirst\n4.Insert Position\n5.Delete First\n6.Delete Last\n7.Delete Position\n8.Exit");
	System.out.println("Enter your choice");
	int ch=s.nextInt();
	if(ch==1)
	{
	   System.out.println("Enter an element");
	   int x=s.nextInt();
	   d1.create(x);
	}
	else if(ch==2)
	{
	   System.out.println("Which way to traverse\n 1.Forward\n2.Backward");
	   int r=s.nextInt();
	   if(r==1)
		d1.rshow();
	   else if(r==2)
		d1.lshow();
	   else
		System.out.println("Invalid choice");
	}
  else if(ch==3)
	{
		System.out.println("Enter an element");
		int x=s.nextInt();
		d1.insertFirst(x);
	}
	else if(ch==4)
	{
	   System.out.println("Enter element and position");
		int x=s.nextInt();
		int pos=s.nextInt();
		d1.insertPosition(x,pos);
	}
	else if(ch==5)
		d1.deleteFirst();
	else if(ch==6)
		d1.deleteLast();
	else if(ch==7)
	{
	     System.out.println("Enter position to delete");
		int pos=s.nextInt();
		d1.deletePosition(pos);
	}
	else if(ch==8)
		break;
	else
	    System.out.println("Wrong choice");
    }
}
}
