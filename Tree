TREE:

Tree data structure is a hierarchical structure that is used to represent and organize data in a way that is easy to navigate and search. 
It is a collection of nodes that are connected by edges and has a hierarchical relationship between the nodes. 
The topmost node of the tree is called the root, and the nodes below it are called the child nodes. 
Each node can have multiple child nodes, and these child nodes can also have their own child nodes, forming a recursive structure.

BINARY TREE:

Binary tree is a tree data structure(non-linear) in which each node can have at most two children which are referred to as the left child and the right child. 




Binary Tree Implementation using LinkedList

import java.util.*;
class Node{
    int data;
    Node left;
    Node right;
    Node(int x){
        data=x;
        left=null;
        right=null;
    }
    public void insert(Node root,int x){
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            Node temp=q.poll();
            if(temp.left==null){
                temp.left=new Node(x);
                break;
            }
            else{
                q.add(temp.left);
            }
            if(temp.right==null){
                temp.right=new Node(x);
                break;
            }
            else{
                q.add(temp.right);
            }
        }
    }
    public void printTree(Node root){
        if(root!=null){
            printTree(root.left);
            System.out.print(root.data+" ");
            printTree(root.right);
        }
    }
}
public class Main
{
	public static void main(String[] args){
	    Scanner sc=new Scanner(System.in);
	    System.out.println("enter root node");
	    int x=sc.nextInt();
	    Node root=new Node(x);
	    for(; ;){
	        System.out.println();
	        System.out.println("1->insert\n2->display\n3->exit");
	        int ch=sc.nextInt();
	        if(ch==1){
	            System.out.println("enter the value: ");
	             x=sc.nextInt();
	            root.insert(root,x);
	        }
	        else if(ch==2){
	           root.printTree(root); 
	        }
	        else{
	            break;
	        }
	    }
	}
}
